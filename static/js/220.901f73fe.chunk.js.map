{"version":3,"file":"static/js/220.901f73fe.chunk.js","mappings":"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","sources":["Application/testBench/TestBench.tsx","webpack://jaze/./src/components/structure/viewFrame/ViewFrame.module.css?eab7","webpack://jaze/./src/components/structure/viewSection/ViewSection.module.css?a8a6","components/structure/viewSection/ViewSection.tsx","components/structure/viewFrame/ViewFrame.tsx","components/structure/viewChildren/displayGrid/DisplayGrid.tsx","hooks/dataManagement/search.ts","../node_modules/classnames/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { ActivityConstructorProps } from \"../../types/structureTypes\";\nimport { useViewTitle } from \"../../contexts/ViewTitleContexts\";\nimport DisplayGrid from \"../../components/structure/viewChildren/displayGrid/DisplayGrid\";\nimport { spotifySearch } from \"../../hooks/dataManagement/search\";\n\nconst TestBench: React.FC<ActivityConstructorProps> = () => {\n  const { setTitle } = useViewTitle();\n  const search = spotifySearch(\"album\", \"DAMN.\");\n  useEffect(() => {\n    setTitle(\"Test Bench\");\n  }, [setTitle]);\n\n  return (\n    <DisplayGrid\n      title=\"Settings\"\n      viewFrames={[\n        {\n          content: <></>,\n          viewWidth: 100,\n        },\n      ]}\n    />\n  );\n};\n\nexport default TestBench;\n","// extracted by mini-css-extract-plugin\nexport default {\"viewFrame\":\"ViewFrame_viewFrame__ZU2oo\",\"empty\":\"ViewFrame_empty__6Vyig\"};","// extracted by mini-css-extract-plugin\nexport default {\"viewSection\":\"ViewSection_viewSection__lYpQo\"};","import React from \"react\";\nimport styles from \"./ViewSection.module.css\";\nimport { ViewSectionProps } from \"types/structureTypes\";\n\nconst ViewSection: React.FC<ViewSectionProps> = ({ children, style }) => {\n  const isEmptyContent = React.Children.count(children) === 0;\n  const sectionClassName = isEmptyContent\n    ? styles.viewSectionEmpty\n    : styles.viewSection;\n\n  return (\n    <div className={sectionClassName} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default ViewSection;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"src/components/structure/viewFrame/ViewFrame.module.css\";\nimport ViewSection from \"../viewSection/ViewSection\";\nimport { ViewFrameProps } from \"types/structureTypes\";\n\nconst isEmptyContent = (children: React.ReactNode): boolean => {\n  const childrenArray = React.Children.toArray(children);\n  return (\n    childrenArray.length === 0 ||\n    childrenArray.every(\n      (child) =>\n        React.isValidElement(child) &&\n        child.type === React.Fragment &&\n        React.Children.count(child.props.children) === 0,\n    )\n  );\n};\n\nconst ViewFrame: React.FC<ViewFrameProps> = ({\n  children,\n  splitPercentage = 100,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [adjustedSplit, setAdjustedSplit] = useState(splitPercentage);\n  const [firstChild, secondChild] = React.Children.toArray(children).slice(\n    0,\n    2,\n  );\n  const isContentEmpty = isEmptyContent([firstChild, secondChild]);\n\n  const adjustSplitPercentage = () => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.offsetWidth;\n      const minChildWidth = 0;\n      const maxChildWidth = 1800;\n      let newSplit =\n        (Math.max(\n          minChildWidth,\n          Math.min(maxChildWidth, containerWidth * (splitPercentage / 100)),\n        ) /\n          containerWidth) *\n        100;\n      setAdjustedSplit(newSplit);\n    }\n  };\n\n  useEffect(() => {\n    adjustSplitPercentage();\n    window.addEventListener(\"resize\", adjustSplitPercentage);\n    return () => window.removeEventListener(\"resize\", adjustSplitPercentage);\n  }, [splitPercentage]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={classNames(styles.viewFrame, {\n        [styles.empty]: isContentEmpty,\n      })}\n    >\n      <ViewSection style={{ width: `${adjustedSplit}%` }}>\n        {firstChild}\n      </ViewSection>\n      <ViewSection style={{ width: `${100 - adjustedSplit}%` }}>\n        {secondChild}\n      </ViewSection>\n    </div>\n  );\n};\n\nexport default ViewFrame;\n","import React from \"react\";\nimport ViewFrame from \"../../viewFrame/ViewFrame\";\nimport { ActivityConstructorProps } from \"types/structureTypes\";\nimport Styles from \"./DisplayGrid.module.css\";\ninterface ViewFrameInfo {\n  content: React.ReactNode;\n  viewWidth?: number;\n}\n\ninterface DisplayGridProps extends ActivityConstructorProps {\n  title?: string;\n  viewFrames: ViewFrameInfo[];\n}\n\nconst DisplayGrid: React.FC<DisplayGridProps> = ({ viewFrames }) => {\n  const totalSpecifiedWidth = viewFrames.reduce(\n    (acc, { viewWidth }) => acc + (viewWidth || 0),\n    0,\n  );\n  const unspecifiedFramesCount = viewFrames.filter(\n    ({ viewWidth }) => viewWidth === undefined,\n  ).length;\n  const remainingWidthPerFrame =\n    (100 - totalSpecifiedWidth) / unspecifiedFramesCount;\n\n  return (\n    <>\n      <section style={{ display: \"flex\", flexDirection: \"row\" }}>\n        {viewFrames.map((frame, index) => (\n          <ViewFrame\n            key={index}\n            splitPercentage={frame.viewWidth || remainingWidthPerFrame}\n          >\n            {frame.content}\n          </ViewFrame>\n        ))}\n      </section>\n    </>\n  );\n};\n\nexport default DisplayGrid;\n","import { useSpotifyClient } from \"../apis/spotifyCOM_API\";\n\nexport const spotifySearch = async (type: string, queryString: string) => {\n  const { fetchSpotifyData } = useSpotifyClient();\n  return await fetchSpotifyData(type, queryString);\n};\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["TestBench","setTitle","useViewTitle","spotifySearch","useEffect","_jsx","DisplayGrid","title","viewFrames","content","_Fragment","viewWidth","_ref","children","style","sectionClassName","React","count","styles","viewSectionEmpty","viewSection","className","splitPercentage","containerRef","useRef","adjustedSplit","setAdjustedSplit","useState","firstChild","secondChild","toArray","slice","isContentEmpty","childrenArray","length","every","child","type","props","isEmptyContent","adjustSplitPercentage","current","containerWidth","offsetWidth","minChildWidth","maxChildWidth","newSplit","Math","max","min","window","addEventListener","removeEventListener","_jsxs","ref","classNames","ViewSection","width","concat","remainingWidthPerFrame","reduce","acc","_ref2","filter","_ref3","undefined","display","flexDirection","map","frame","index","ViewFrame","async","queryString","fetchSpotifyData","useSpotifyClient","hasOwn","hasOwnProperty","classes","i","arguments","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","module","exports","default"],"sourceRoot":""}