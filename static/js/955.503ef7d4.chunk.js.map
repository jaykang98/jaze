{"version":3,"file":"static/js/955.503ef7d4.chunk.js","mappings":"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","sources":["webpack://jaze/./src/Application/Tops/Tops.module.css?62ce","webpack://jaze/./src/components/jaze/albumCard/AlbumCard.module.css?e1ee","components/jaze/albumCard/AlbumCard.tsx","webpack://jaze/./src/components/jaze/userCard/UserCard.module.css?764b","components/jaze/userCard/UserCard.tsx","Application/Tops/Tops.tsx","webpack://jaze/./src/components/structure/viewFrame/ViewFrame.module.css?eab7","webpack://jaze/./src/components/structure/viewSection/ViewSection.module.css?a8a6","components/structure/viewSection/ViewSection.tsx","components/structure/viewFrame/ViewFrame.tsx","components/structure/viewChildren/displayGrid/DisplayGrid.tsx","webpack://jaze/./src/components/structure/viewChildren/displayTable/DisplayTable.module.css?215c","components/structure/viewChildren/displayTable/DisplayTable.tsx","hooks/dataManagement/search.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"albumContainer\":\"Tops_albumContainer__lc-d1\",\"faIcon\":\"Tops_faIcon__7oh7p\"};","// extracted by mini-css-extract-plugin\nexport default {\"albumCard\":\"AlbumCard_albumCard__DZu2o\",\"albumImage\":\"AlbumCard_albumImage__jtD6n\",\"caption\":\"AlbumCard_caption__4Hc5y\",\"container\":\"AlbumCard_container__DtPfu\"};","import React, { useEffect, useState } from \"react\";\nimport styles from \"./AlbumCard.module.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpotify } from \"@fortawesome/free-brands-svg-icons\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { spotifySearch } from \"../../../hooks/dataManagement/search\";\n\ninterface AlbumCardProps {\n  src: string;\n  alt: string;\n  caption: string;\n  type?: string;\n}\n\nconst AlbumCard: React.FC<AlbumCardProps> = ({ src, alt, caption, type }) => {\n  const [url, setUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      const result = await spotifySearch(type, caption);\n      setUrl(result.toString());\n    };\n\n    fetchUrl();\n  }, [type, caption]);\n\n  return (\n    <>\n      <div\n        className={styles.albumCard}\n        onClick={() => (window.location.href = url)}\n      >\n        <img src={src} alt={alt} className={styles.albumImage} />\n        <div className={styles.container}>\n          <FontAwesomeIcon icon={faSpotify as IconProp} />\n          <span className={styles.caption}>{caption}</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AlbumCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"userCard\":\"UserCard_userCard__pHAc1\",\"gradientLoop\":\"UserCard_gradientLoop__0amUX\",\"userImage\":\"UserCard_userImage__zJNy5\",\"container\":\"UserCard_container__VOb-o\",\"link\":\"UserCard_link__AfC7i\"};","import React from \"react\";\nimport styles from \"./UserCard.module.css\";\nimport { useLocalStorage } from \"../../../hooks/utils/useLocalStorage\";\nimport { faLastfmSquare, faSpotify } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nconst UserCard: React.FC<{ src: string; alt: string }> = ({ src, alt }) => {\n  const { getItem } = useLocalStorage();\n  const userProfile = JSON.parse(getItem(\"SpotifyUserData\") || \"{}\");\n  const userData = JSON.parse(getItem(\"lastFMUserData\") || \"{}\");\n\n  return (\n    <div className={styles.userCard}>\n      <img src={src} alt={alt} className={styles.userImage} />\n      <div className={styles.container}>\n        <FontAwesomeIcon icon={faSpotify as IconProp} />\n        {userProfile.external_urls?.spotify ? (\n          <a\n            href={userProfile.external_urls.spotify}\n            key=\"spotify-link\"\n            className={styles.link}\n          >\n            Spotify: {userProfile.display_name}\n          </a>\n        ) : (\n          <span className={styles.link}> Spotify: Not Logged In</span>\n        )}\n      </div>\n      <div className={styles.container}>\n        <FontAwesomeIcon icon={faLastfmSquare as IconProp} />\n        {userData.user?.url ? (\n          <a href={userData.user.url} key=\"lastfm-link\" className={styles.link}>\n            Last.FM: {userData.user.name}\n          </a>\n        ) : (\n          <span className={styles.link}> Last.FM: Not Logged In</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default UserCard;\n","import React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styles from \"./Tops.module.css\";\nimport {\n    faGlobeAmericas,\n    faCalendarAlt,\n    faUsers,\n    faArrowAltCircleUp,\n    IconDefinition,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport DisplayTable from \"../../components/structure/viewChildren/displayTable/DisplayTable\";\nimport DisplayGrid from \"../../components/structure/viewChildren/displayGrid/DisplayGrid\";\nimport { ActivityConstructorProps } from \"../../types/structureTypes\";\nimport AlbumCard from \"../../components/jaze/albumCard/AlbumCard\";\nimport { useLocalStorage } from \"../../hooks/utils/useLocalStorage\";\nimport { useViewTitle } from \"../../contexts/ViewTitleContexts\";\nimport UserCard from \"../../components/jaze/userCard/UserCard\";\nimport { spotifySearch } from \"../../hooks/dataManagement/search\";\nimport { faSpotify, faSquareLastfm } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Tops: React.FC<ActivityConstructorProps> = () => {\n    const { getItem } = useLocalStorage();\n    const { setTitle } = useViewTitle();\n\n    const albumData = JSON.parse(getItem(\"lastFMAlbumData\"));\n    const artistData = JSON.parse(getItem(\"lastFMArtistData\"));\n    const trackData = JSON.parse(getItem(\"lastFMTrackData\"));\n    const userData = JSON.parse(getItem(\"lastFMUserData\"));\n    const userProfile = JSON.parse(getItem(\"SpotifyUserData\"));\n    const totalScrobbles = parseInt(userData?.user?.playcount || \"0\", 10);\n\n    const formatNumber = (number: number) =>\n        new Intl.NumberFormat(undefined, {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format(number);\n    const formatPercent = (number: number) =>\n        new Intl.NumberFormat(undefined, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n        }).format(number);\n    useEffect(() => {\n        setTitle(\"Tops\");\n    }, [setTitle]);\n\n    const getLargeImage = (images: Array<{ size: string; \"#text\": string }>) =>\n        images.find((image) => image.size === \"large\")?.[\"#text\"] || \"\";\n    const userImage = userProfile?.images?.[1]?.url;\n    const renderUserInfo = () => {\n        if (!userData || !userData.user) return <p>No data available.</p>;\n\n        const registrationDate = new Date(\n            userData.user.registered?.unixtime * 1000 || Date.now(),\n        );\n\n        const dataForDisplay = [\n            [\n                <FontAwesomeIcon key=\"country-icon\" icon={faGlobeAmericas} />,\n                \"Country\",\n                userData.user.country,\n            ],\n            [\n                <FontAwesomeIcon key=\"user-since-icon\" icon={faCalendarAlt} />,\n                \"User Since\",\n                `${new Date(userData.user.registered?.unixtime * 1000 || Date.now()).toLocaleDateString()} (${new Date().getFullYear() - registrationDate.getFullYear()} years)`,\n            ],\n            [\n                <FontAwesomeIcon key=\"playcount-icon\" icon={faArrowAltCircleUp} />,\n                \"Total Scrobbles\",\n                formatNumber(totalScrobbles),\n            ],\n            [\n                <FontAwesomeIcon key=\"playcount-icon\" icon={faUsers} />,\n                \"Followers\",\n                formatNumber(\n                    parseInt(userProfile?.followers?.total || \"0\", 10) +\n                    parseInt(userData?.user?.subscriber || \"0\", 10),\n                ),\n            ],\n        ];\n\n        return <DisplayTable data={dataForDisplay} />;\n    };\n\n    const renderItemContent = (\n        data: any,\n        type: \"artist\" | \"album\" | \"track\",\n        isTable: boolean = false,\n    ) => {\n        if (!data || data.length === 0) {\n            return <p>No {type} data available.</p>;\n        }\n\n        const dataType =\n            type === \"artist\"\n                ? data?.topartists\n                : type === \"album\"\n                    ? data?.topalbums\n                    : data?.toptracks;\n        const items = dataType[type].slice(0, isTable ? 10 : 9);\n\n        const handleLinkClick = async (item: any, event: React.MouseEvent) => {\n            event.preventDefault();\n            window.location.href = await spotifySearch(type, item.name);\n        };\n\n        return isTable\n            ? renderTable(items, handleLinkClick)\n            : renderGrid(items, type);\n    };\n\n    const renderTable = (items, handleLinkClick) => (\n        <DisplayTable\n            data={items.map((item: any, index: number) => [\n                `${index + 1}`,\n                <span>{item.name}</span>,\n                <span className={styles.link}>\n                    {formatNumber(+item.playcount)} scrobbles (\n                    {formatPercent((+item.playcount / totalScrobbles) * 100)}%)\n                </span>,\n                <FontAwesomeIcon\n                    href=\"#\"\n                    icon={faSpotify as IconDefinition}\n                    onClick={(event) => handleLinkClick(item, event)}\n                    className=\"styles.faIcon\"\n                ></FontAwesomeIcon>,\n                <FontAwesomeIcon\n                    icon={faSquareLastfm as IconDefinition}\n                    onClick={(_event) => (window.location.href = item.url)}\n                    className=\"styles.faIcon\"\n                ></FontAwesomeIcon>,\n            ])}\n        />\n    );\n    const renderGrid = (items, type) => {\n        const sliceRanges = {\n            track: [0, 3],\n            artist: [3, 6],\n            album: [6, 9],\n        };\n\n        return (\n            <div className={styles.albumContainer}>\n                {items.slice(...sliceRanges[type]).map((item: any) => (\n                    <AlbumCard\n                        key={item.name}\n                        src={getLargeImage(item?.image)}\n                        alt={item.name}\n                        caption={item.name}\n                        type={type}\n                    />\n                ))}\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <DisplayGrid\n                title=\"Top Stats\"\n                viewFrames={[\n                    {\n                        content: (\n                            <>\n                                {renderItemContent(artistData, \"artist\")}\n                                {renderItemContent(artistData, \"artist\", true)}\n                                <h3>Your Top Artists</h3>\n                                <h1>of all time</h1>\n                            </>\n                        ),\n                        viewWidth: 100,\n                    },\n                    {\n                        content: (\n                            <>\n                                {renderItemContent(albumData, \"album\")}\n                                {renderItemContent(albumData, \"album\", true)}\n                                <h3>Your Top Albums</h3>\n                                <h1>of all time</h1>\n                            </>\n                        ),\n                        viewWidth: 100,\n                    },\n                ]}\n            />\n\n            <DisplayGrid\n                viewFrames={[\n                    {\n                        content: (\n                            <>\n                                {renderItemContent(trackData, \"track\")}\n                                {renderItemContent(trackData, \"track\", true)}\n                                <h3>Your Top Tracks </h3>\n                                <h1>of all time</h1>\n                            </>\n                        ),\n                        viewWidth: 100,\n                    },\n                    {\n                        content: (\n                            <>\n                                <div className={styles.albumContainer}>\n                                    <UserCard key=\"userImage\" src={userImage} alt=\"User\" />\n                                    {renderUserInfo()}\n                                </div>\n                                <h3>Your Profile</h3>\n                                <h1>Information</h1>\n                            </>\n                        ),\n                        viewWidth: 100,\n                    },\n                ]}\n            />\n        </>\n    );\n};\n\nexport default Tops;\n","// extracted by mini-css-extract-plugin\nexport default {\"viewFrame\":\"ViewFrame_viewFrame__ZU2oo\",\"empty\":\"ViewFrame_empty__6Vyig\"};","// extracted by mini-css-extract-plugin\nexport default {\"viewSection\":\"ViewSection_viewSection__lYpQo\"};","import React from \"react\";\nimport styles from \"./ViewSection.module.css\";\nimport { ViewSectionProps } from \"types/structureTypes\";\n\nconst ViewSection: React.FC<ViewSectionProps> = ({ children, style }) => {\n  const isEmptyContent = React.Children.count(children) === 0;\n  const sectionClassName = isEmptyContent\n    ? styles.viewSectionEmpty\n    : styles.viewSection;\n\n  return (\n    <div className={sectionClassName} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default ViewSection;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"src/components/structure/viewFrame/ViewFrame.module.css\";\nimport ViewSection from \"../viewSection/ViewSection\";\nimport { ViewFrameProps } from \"types/structureTypes\";\n\nconst isEmptyContent = (children: React.ReactNode): boolean => {\n  const childrenArray = React.Children.toArray(children);\n  return (\n    childrenArray.length === 0 ||\n    childrenArray.every(\n      (child) =>\n        React.isValidElement(child) &&\n        child.type === React.Fragment &&\n        React.Children.count(child.props.children) === 0,\n    )\n  );\n};\n\nconst ViewFrame: React.FC<ViewFrameProps> = ({\n  children,\n  splitPercentage = 100,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [adjustedSplit, setAdjustedSplit] = useState(splitPercentage);\n  const [firstChild, secondChild] = React.Children.toArray(children).slice(\n    0,\n    2,\n  );\n  const isContentEmpty = isEmptyContent([firstChild, secondChild]);\n\n  const adjustSplitPercentage = () => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.offsetWidth;\n      const minChildWidth = 0;\n      const maxChildWidth = 1800;\n      let newSplit =\n        (Math.max(\n          minChildWidth,\n          Math.min(maxChildWidth, containerWidth * (splitPercentage / 100)),\n        ) /\n          containerWidth) *\n        100;\n      setAdjustedSplit(newSplit);\n    }\n  };\n\n  useEffect(() => {\n    adjustSplitPercentage();\n    window.addEventListener(\"resize\", adjustSplitPercentage);\n    return () => window.removeEventListener(\"resize\", adjustSplitPercentage);\n  }, [splitPercentage]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={classNames(styles.viewFrame, {\n        [styles.empty]: isContentEmpty,\n      })}\n    >\n      <ViewSection style={{ width: `${adjustedSplit}%` }}>\n        {firstChild}\n      </ViewSection>\n      <ViewSection style={{ width: `${100 - adjustedSplit}%` }}>\n        {secondChild}\n      </ViewSection>\n    </div>\n  );\n};\n\nexport default ViewFrame;\n","import React from \"react\";\nimport ViewFrame from \"../../viewFrame/ViewFrame\";\nimport { ActivityConstructorProps } from \"types/structureTypes\";\nimport Styles from \"./DisplayGrid.module.css\";\ninterface ViewFrameInfo {\n  content: React.ReactNode;\n  viewWidth?: number;\n}\n\ninterface DisplayGridProps extends ActivityConstructorProps {\n  title?: string;\n  viewFrames: ViewFrameInfo[];\n}\n\nconst DisplayGrid: React.FC<DisplayGridProps> = ({ viewFrames }) => {\n  const totalSpecifiedWidth = viewFrames.reduce(\n    (acc, { viewWidth }) => acc + (viewWidth || 0),\n    0,\n  );\n  const unspecifiedFramesCount = viewFrames.filter(\n    ({ viewWidth }) => viewWidth === undefined,\n  ).length;\n  const remainingWidthPerFrame =\n    (100 - totalSpecifiedWidth) / unspecifiedFramesCount;\n\n  return (\n    <>\n      <section style={{ display: \"flex\", flexDirection: \"row\" }}>\n        {viewFrames.map((frame, index) => (\n          <ViewFrame\n            key={index}\n            splitPercentage={frame.viewWidth || remainingWidthPerFrame}\n          >\n            {frame.content}\n          </ViewFrame>\n        ))}\n      </section>\n    </>\n  );\n};\n\nexport default DisplayGrid;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"DisplayTable_table__wz8iq\",\"cell\":\"DisplayTable_cell__FEVfS\"};","// File: DisplayTable.tsx\nimport React from \"react\";\nimport styles from \"./DisplayTable.module.css\";\n\ntype TableCell = string | JSX.Element;\n\ninterface TableProps {\n  data: TableCell[][];\n}\n\nconst DisplayTable: React.FC<TableProps> = ({ data }) => {\n  if (data.length === 0 || (data.length > 0 && data[0].length === 0)) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {data.map((row, rowIndex) => (\n          <tr key={`row-${rowIndex}`}>\n            {row.map((cell, cellIndex) => (\n              <td\n                key={`cell-${rowIndex}-${cellIndex}`}\n                className={`${styles.cell} ${cellIndex === 0 ? styles.boldText : \"\"}`}\n              >\n                {cell}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DisplayTable;\n","import { useSpotifyClient } from \"../apis/spotifyCOM_API\";\n\nexport const spotifySearch = async (type: string, queryString: string) => {\n  const { fetchSpotifyData } = useSpotifyClient();\n  return await fetchSpotifyData(type, queryString);\n};\n"],"names":["_ref","src","alt","caption","type","url","setUrl","useState","useEffect","async","result","spotifySearch","toString","fetchUrl","_jsx","_Fragment","children","_jsxs","className","styles","onClick","window","location","href","FontAwesomeIcon","icon","faSpotify","_userProfile$external","_userData$user","getItem","useLocalStorage","userProfile","JSON","parse","userData","external_urls","spotify","display_name","faLastfmSquare","user","name","Tops","_userProfile$images","_userProfile$images$","setTitle","useViewTitle","albumData","artistData","trackData","totalScrobbles","parseInt","playcount","formatNumber","number","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","format","getLargeImage","images","_images$find","find","image","size","userImage","renderItemContent","data","isTable","arguments","length","items","topartists","topalbums","toptracks","slice","renderTable","item","event","preventDefault","renderGrid","handleLinkClick","DisplayTable","map","index","concat","link","faSquareLastfm","_event","albumContainer","track","artist","album","AlbumCard","DisplayGrid","title","viewFrames","content","viewWidth","UserCard","renderUserInfo","_userData$user$regist","_userData$user$regist2","_userProfile$follower","_userData$user2","registrationDate","Date","registered","unixtime","now","dataForDisplay","faGlobeAmericas","country","faCalendarAlt","toLocaleDateString","getFullYear","faArrowAltCircleUp","faUsers","followers","total","subscriber","style","sectionClassName","React","count","viewSectionEmpty","viewSection","splitPercentage","containerRef","useRef","adjustedSplit","setAdjustedSplit","firstChild","secondChild","toArray","isContentEmpty","childrenArray","every","child","props","isEmptyContent","adjustSplitPercentage","current","containerWidth","offsetWidth","minChildWidth","maxChildWidth","newSplit","Math","max","min","addEventListener","removeEventListener","ref","classNames","ViewSection","width","remainingWidthPerFrame","reduce","acc","_ref2","filter","_ref3","display","flexDirection","frame","ViewFrame","table","row","rowIndex","cell","cellIndex","boldText","queryString","fetchSpotifyData","useSpotifyClient"],"sourceRoot":""}